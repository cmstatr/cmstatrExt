[{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/articles/compute-equiv-factors.html","id":"input","dir":"Articles","previous_headings":"Calculator","what":"Input","title":"Equivalency Factor Calculator","text":"Qualification Sample Size (\\(n\\)): Equivalency Sample Size (\\(m\\)): Significance (\\(\\alpha\\)):","code":""},{"path":[]},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/articles/compute-equiv-factors.html","id":"details","dir":"Articles","previous_headings":"","what":"Details","title":"Equivalency Factor Calculator","text":"Method Details Software Details Based user selected qualification sample size (\\(n\\)), equivalency sample size (\\(m\\)) significance level (\\(\\alpha\\)), factors \\(k_1\\) \\(k_2\\) calculated. Equivalency limits set : \\[ W_{min\\,indiv} = \\bar{x} - k_1 \\cdot s \\\\ W_{avg} = \\bar{x} - k_2 \\cdot s \\] power equivalency criteria investigated simulation. simulation, 2500 qualification samples drawn standard normal distribution (\\(N(\\mu, \\sigma)\\)) equivalency limits computed based qualification sample. Next 2500 equivalency samples drawn \\(N(\\mu-\\delta\\sigma, \\sigma)\\) distribution. equivalency samples compared equivalency limits proportion equivalency samples rejected reported. Thus, total 6,250,000 comparisons made. repeated several values \\(\\delta\\). functionality page provided C++ code used cmstatrExt R package. code compiled WebAssembly can run inside web browser without user installing special software. software licensed AGPL-3 license. Source code available . Graphing provided Plotly JavaScript library, licensed MIT license.","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/articles/compute-p-value-equiv.html","id":"input","dir":"Articles","previous_headings":"Calculator","what":"Input","title":"Equivalency p-Value Calculator","text":"Qualification Sample Mean (\\(\\bar{x}_{qual}\\)): Qualification Sample Standard Deviation (\\(s_{qual}\\)): Qualification Sample Size (\\(n\\)): Equivalency Sample Minimum (\\(x_{min\\,equiv}\\)): Equivalency Sample Mean (\\(\\bar{x}_{equiv}\\)): Equivalency Sample Size (\\(m\\)):","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/articles/compute-p-value-equiv.html","id":"details","dir":"Articles","previous_headings":"","what":"Details","title":"Equivalency p-Value Calculator","text":"Method Details Software Details Based user selected qualification sample statistics (\\(\\bar{x}_{qual}\\), \\(s_{qual}\\), \\(n\\)), equivalency sample statistics (\\(x_{min\\,equiv}\\), \\(\\bar{x}_{equiv}\\), \\(m\\)), following two statistics computed: \\[ t_1 = \\frac{\\bar{x}_{qual} - x_{min\\,equiv}}{s_{qual}} \\\\ t_2 = \\frac{\\bar{x}_{qual} - \\bar{x}_{equiv}}{s_{qual}} \\] statistics, p-Value computed. functionality page provided C++ code used cmstatrExt R package. code compiled WebAssembly can run inside web browser without user installing special software. software licensed AGPL-3 license. Source code available .","code":""},{"path":"https://cmstatrExt.cmstatr.net/articles/equivalency-p-values.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"p-Values for Equivalency","text":"dual acceptance criteria used composite materials accept reject new lot material (process change) based sample minimum sample mean new lot material. Acceptance limits normally set null hypothesis, equal probability rejecting lot due minimum rejecting lot due mean. acceptance limits set probability rejecting lot (due either minimum mean) null hypothesis \\(\\alpha\\). eliminate constraint equal probability rejecting lot due minimum mean, longer unique values acceptance limits: instead, can calculate p-value sample minimum sample mean compare p-value selected value \\(\\alpha\\). cmstatrExt package provides functions computing acceptance limits, p-values curves indicating values minimum mean result p-value. vignette demonstrates functionality. “two-sample” method sample statistics qualification data known. Caution: true mean population acceptance sample drawn higher population mean qualification distribution, using p-value method may declare acceptance sample equivalent even standard deviation larger. due fact statistical test one-sided test. Similarly, acceptance population much lower standard deviation qualification population, test may allow undesirable decrease mean. , considerable judgement required using method. vignette, ’ll use cmstatrExt package. ’ll also use tidyverse package data manipulation graphing. Finally, ’ll use one example data sets cmstatr package.","code":"library(cmstatrExt) library(tidyverse) library(cmstatr)"},{"path":"https://cmstatrExt.cmstatr.net/articles/equivalency-p-values.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example Data","title":"p-Values for Equivalency","text":"example, ’ll use RTD warp tension strength carbon.fabric.2 example data set cmstatr package. data follows: sample, can calculate following summary statistics strength:","code":"dat <- carbon.fabric.2 %>%   filter(condition == \"RTD\" & test == \"WT\") dat #>    test condition batch panel thickness nplies strength modulus failure_mode #> 1    WT       RTD     A     1     0.113     14  129.224   8.733          LAB #> 2    WT       RTD     A     1     0.112     14  144.702   8.934      LAT,LWB #> 3    WT       RTD     A     1     0.113     14  137.194   8.896          LAB #> 4    WT       RTD     A     1     0.113     14  139.728   8.835      LAT,LWB #> 5    WT       RTD     A     2     0.113     14  127.286   9.220          LAB #> 6    WT       RTD     A     2     0.111     14  129.261   9.463          LAT #> 7    WT       RTD     A     2     0.112     14  130.031   9.348          LAB #> 8    WT       RTD     B     1     0.111     14  140.038   9.244      LAT,LGM #> 9    WT       RTD     B     1     0.111     14  132.880   9.267          LWT #> 10   WT       RTD     B     1     0.113     14  132.104   9.198          LAT #> 11   WT       RTD     B     2     0.114     14  137.618   9.179      LAT,LAB #> 12   WT       RTD     B     2     0.113     14  139.217   9.123          LAB #> 13   WT       RTD     B     2     0.113     14  134.912   9.116          LAT #> 14   WT       RTD     B     2     0.111     14  141.558   9.434    LAB / LAT #> 15   WT       RTD     C     1     0.108     14  150.242   9.451          LAB #> 16   WT       RTD     C     1     0.109     14  147.053   9.391          LGM #> 17   WT       RTD     C     1     0.111     14  145.001   9.318      LAT,LWB #> 18   WT       RTD     C     1     0.113     14  135.686   8.991    LAT / LAB #> 19   WT       RTD     C     1     0.112     14  136.075   9.221          LAB #> 20   WT       RTD     C     2     0.114     14  143.738   8.803      LAT,LGM #> 21   WT       RTD     C     2     0.113     14  143.715   8.893      LAT,LAB #> 22   WT       RTD     C     2     0.113     14  147.981   8.974      LGM,LWB #> 23   WT       RTD     C     2     0.112     14  148.418   9.118      LAT,LWB #> 24   WT       RTD     C     2     0.113     14  135.435   9.217      LAT/LAB #> 25   WT       RTD     C     2     0.113     14  146.285   8.920      LWT/LWB #> 26   WT       RTD     C     2     0.111     14  139.078   9.015          LAT #> 27   WT       RTD     C     2     0.112     14  146.825   9.036      LAT/LWT #> 28   WT       RTD     C     2     0.110     14  148.235   9.336      LWB/LAB qual <- dat %>%   summarise(n = n(), mean = mean(strength), sd = sd(strength)) qual #>    n     mean       sd #> 1 28 139.6257 6.716047"},{"path":"https://cmstatrExt.cmstatr.net/articles/equivalency-p-values.html","id":"acceptance-limits","dir":"Articles","previous_headings":"","what":"Acceptance Limits","title":"p-Values for Equivalency","text":"can calculate acceptance factors acceptance sample size 8 \\(alpha=0.05\\) using cmstatrExt package follows: factors can transformed limits using following equations: \\[ W_{indiv} = \\bar{x}_{qual} - k_1 s_{qual} \\\\ W_{mean} = \\bar{x}_{qual} - k_2 s_{qual} \\] Implementing R: , acceptance sample minimum individual less 119.8 mean less 134.3, reject .","code":"k <- k_equiv_two_sample(0.05, qual$n, 8) k #> [1] 2.9462891 0.7972005 acceptance_limits <- qual$mean - k * qual$sd acceptance_limits #> [1] 119.8383 134.2717"},{"path":"https://cmstatrExt.cmstatr.net/articles/equivalency-p-values.html","id":"p-value","dir":"Articles","previous_headings":"","what":"p-Value","title":"p-Values for Equivalency","text":"might ask happens ’s one low value acceptance sample ’s acceptance limit minimum individual, mean well limit. naive response reject sample. , acceptance limits just calculated based setting equal probability rejecting sample based minimum mean null hypothesis — pairs minimum mean values p-value acceptance limits calculated. order use p-value function cmstatrExt package, need apply following transformation: \\[ t_1 = \\frac{\\bar{x}_{qual} - x_{acceptance\\,(1)}}{s_{qual}} \\\\ t_2 = \\frac{\\bar{x}_{qual} - \\bar{x}_{acceptance}}{s_{qual}} \\] demonstration, let’s first calculate p-value acceptance limits. get \\(p=\\alpha\\). value close \\(\\alpha=0.05\\) — within expected numeric precision. Now, let’s consider case sample minimum 116 mean 138. sample minimum acceptance limit (116 < 120), sample mean well acceptance limit (138 > 134). Let’s calculate p-value case: Since value well selected value \\(\\alpha=0.05\\), accept sample. sort analysis can useful site- process-equivalency programs, MRB activities.","code":"p_equiv_two_sample(   n = qual$n,   m = 8,   t1 = (qual$mean - acceptance_limits[1]) / qual$sd,   t2 = (qual$mean - acceptance_limits[2]) / qual$sd ) #> [1] 0.05003139 p_equiv_two_sample(   n = qual$n,   m = 8,   t1 = (qual$mean - 116) / qual$sd,   t2 = (qual$mean - 138) / qual$sd ) #> [1] 0.2771053"},{"path":"https://cmstatrExt.cmstatr.net/articles/equivalency-p-values.html","id":"curves-of-constant-p-values","dir":"Articles","previous_headings":"","what":"Curves of Constant p-Values","title":"p-Values for Equivalency","text":"cmstatrExt package provides function produces data.frame containing values \\(t_1\\) \\(t_2\\) result p-value. can create data.frame p-values 0.05 follows: can plot curve using ggplot2, part tidyverse package:  plot , make sure use geom_path geom_line. former plot points order given; latter plot points ascending order x variable, can cause problems vertical portion graph. Let’s overlay acceptance limits calculated k_equiv_two_sample function well values t_1 t_2 sample discussed previous section.  better yet, can transform back engineering units:","code":"curve <- iso_equiv_two_sample(qual$n, 8, 0.05, 4, 1.5, 10) curve #>          t1        t2 #> 1  4.000000 0.6876226 #> 2  3.870890 0.6892186 #> 3  3.742796 0.6924106 #> 4  3.616481 0.6971987 #> 5  3.492200 0.7027848 #> 6  3.372239 0.7115630 #> 7  3.258124 0.7235332 #> 8  3.152269 0.7394934 #> 9  3.056580 0.7594437 #> 10 2.975250 0.7849802 #> 11 2.880451 0.8321028 #> 12 2.825808 0.8732404 #> 13 2.782601 0.9266275 #> 14 2.749561 0.9895908 #> 15 2.726687 1.0602149 #> 16 2.713980 1.1365848 #> 17 2.706355 1.2156679 #> 18 2.701272 1.2961076 #> 19 2.701272 1.3776646 #> 20 2.698730 1.4591417 curve %>%   ggplot(aes(x = t1, y = t2)) +   geom_path() +   ggtitle(\"Acceptance criteria for alpha=0.05\") curve %>%   ggplot(aes(x = t1, y = t2)) +   geom_path() +   geom_hline(yintercept = k[2], color = \"red\") +   geom_vline(xintercept = k[1], color = \"red\") +   geom_point(data = data.frame(     t1 = (qual$mean - 116) / qual$sd,     t2 = (qual$mean - 138) / qual$sd   ),   shape = \"*\", size = 5) +   ggtitle(\"Acceptance criteria for alpha=0.05\") curve %>%   mutate(x_min = qual$mean - t1 * qual$sd,          x_mean = qual$mean - t2 * qual$sd) %>%   ggplot(aes(x = x_min, y = x_mean)) +   geom_path() +   geom_hline(yintercept = acceptance_limits[2], color = \"red\") +   geom_vline(xintercept = acceptance_limits[1], color = \"red\") +   geom_point(data = data.frame(     x_min = 116,     x_mean = 138   ),   shape = \"*\", size = 5) +   ggtitle(\"Acceptance criteria for alpha=0.05\")"},{"path":"https://cmstatrExt.cmstatr.net/articles/stress-strain.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Stress-Strain Curves","text":"example, following packages need loaded:","code":"knitr::opts_chunk$set(message = FALSE, warning = FALSE) library(cmstatrExt) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"},{"path":"https://cmstatrExt.cmstatr.net/articles/stress-strain.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example Data","title":"Stress-Strain Curves","text":"cmstatrExt package comes example stress-strain data. first rows data : data “tidy” format. means data-point (stress-strain value) row data.frame. example data set contains stress-strain data four coupons (Samples 1 4). row identifies coupon observation comes . order columns matter can give column name wish, data need type format. Let’s plot pa12_tension example data.","code":"head(pa12_tension) #> # A tibble: 6 × 3 #>   Coupon     Strain Stress #>   <chr>       <dbl>  <dbl> #> 1 Coupon 4 0        0.0561 #> 2 Coupon 4 0.000200 0.247  #> 3 Coupon 4 0.000400 0.569  #> 4 Coupon 4 0.000601 0.440  #> 5 Coupon 4 0.000801 0.778  #> 6 Coupon 4 0.00100  0.854 pa12_tension %>%   ggplot(aes(x = Strain, y = Stress, color = Coupon)) +   geom_point()"},{"path":"https://cmstatrExt.cmstatr.net/articles/stress-strain.html","id":"fitting-a-polynomial-model","dir":"Articles","previous_headings":"","what":"Fitting a Polynomial Model","title":"Stress-Strain Curves","text":"first example, ’ll fit following quadratic model: \\[ \\sigma = c_1 \\epsilon + c_2 \\epsilon^2 \\] \\(\\sigma\\) stress, \\(\\epsilon\\) strain \\(c_1\\) \\(c_2\\) constants ’ll find. need write R formula, slightly different notation. stress strain variables data Stress Strain, respectively, ’ll use variable names formula. Notice formula, tilde (~) used instead equal sign. ’ll also notice ’ve wrapped terms right-hand side inside identity function (): reason lm treat Strain^2 interaction, rather squaring value Strain, (Strain^2) actually square value Strain. formula doesn’t need coefficients (e.g. \\(c_1\\) \\(c_2\\)). Finally, notice ’ve included term +0, tells lm want intercept zero, normally desirable due physical notion stress zero zero strain. function average_curve_lm takes four arguments. first data.frame data. second name variable defining coupon. third formula just discussed. last argument number “bins”: default 100 hence can omitted. See documentation function information binning data. Let’s run function execute summary method result: summary method shows strain range curve fit. range always starts zero ends lowest maximum strain individual coupon. summary method also lists coefficients well information whether term statistically significant, residuals R-squared values. Next, let’s plot original data curve fit. ’ll use augment method add curve fit original data, pass result ggplot.  Due polynomial model chose (quadratic), curve fit poor. can better. Let’s try cubic function next.  cubic model much better fit. equation curve fit : \\[ \\sigma = 1174 \\, \\epsilon - 8783 \\, \\epsilon^2 + 20586 \\, \\epsilon^3 \\] Strain need independent variable stress need dependent variable. fit model reversed.  case, fit good, ’s much practical use. However, note curve fit ends lowest maximum stress value individual coupon time. curve fit always end lowest maximum value independent variable (variable right hand side formula).","code":"Stress ~ I(Strain) + I(Strain^2) + 0 curve_quadratic <- average_curve_lm(   pa12_tension, Coupon,   Stress ~ I(Strain) + I(Strain^2) + 0 ) summary(curve_quadratic) #>  #> Range: ` Strain ` in  [0,  0.1409409 ] #> n_bins =  100 #>  #> Call: #> average_curve_lm(data = pa12_tension, coupon_var = Coupon, model = Stress ~  #>     I(Strain) + I(Strain^2) + 0) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.3812 -1.1354  0.0107  1.4057  4.2013  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> I(Strain)    1010.585      4.016   251.6   <2e-16 *** #> I(Strain^2) -4913.506     36.786  -133.6   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.626 on 398 degrees of freedom #> Multiple R-squared:  0.9985, Adjusted R-squared:  0.9984  #> F-statistic: 1.286e+05 on 2 and 398 DF,  p-value: < 2.2e-16 curve_quadratic %>%   augment() %>%   ggplot(aes(x = Strain)) +   geom_point(aes(y = Stress, color = Coupon)) +   geom_line(aes(y = .fit)) curve_cubic <- average_curve_lm(   pa12_tension, Coupon,   Stress ~ I(Strain) + I(Strain^2) + I(Strain^3) + 0 ) summary(curve_cubic) #>  #> Range: ` Strain ` in  [0,  0.1409409 ] #> n_bins =  100 #>  #> Call: #> average_curve_lm(data = pa12_tension, coupon_var = Coupon, model = Stress ~  #>     I(Strain) + I(Strain^2) + I(Strain^3) + 0) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.3080 -0.4003 -0.1726  0.3103  2.2058  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> I(Strain)    1173.285      4.662  251.69   <2e-16 *** #> I(Strain^2) -8761.916    102.493  -85.49   <2e-16 *** #> I(Strain^3) 20480.874    537.832   38.08   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.7546 on 397 degrees of freedom #> Multiple R-squared:  0.9997, Adjusted R-squared:  0.9997  #> F-statistic: 3.985e+05 on 3 and 397 DF,  p-value: < 2.2e-16 curve_cubic %>%   augment() %>%   ggplot(aes(x = Strain)) +   geom_point(aes(y = Stress, color = Coupon)) +   geom_line(aes(y = .fit)) average_curve_lm(   pa12_tension, Coupon,   Strain ~ I(Stress) + I(Stress^2) + I(Stress^3) + I(Stress^4) + 0 ) %>%   augment() %>%   ggplot(aes(y = Stress)) +   geom_point(aes(x = Strain, color = Coupon)) +   geom_line(aes(x = .fit))"},{"path":"https://cmstatrExt.cmstatr.net/articles/stress-strain.html","id":"fitting-a-bilinear-model","dir":"Articles","previous_headings":"","what":"Fitting a Bilinear Model","title":"Stress-Strain Curves","text":"Next, turn attention fitting model represented R formula. ’ll fit following model: \\[ \\sigma = \\left\\{ \\begin{matrix} c_1 \\epsilon & \\text{}\\epsilon \\le \\epsilon_1 \\\\ c_2 \\left(\\epsilon - \\epsilon_1\\right) + c_1\\epsilon_1 & \\text{otherwise} \\end{matrix} \\right. \\] model thus straight line starting origin extending unknown value strain (\\(\\epsilon_1\\)), continuing different slope. order use model average_curve_optim, need write R function first argument independent variable (strain case) second argument vector parameters. case, three parameters, \\(c_1\\), \\(c_2\\) \\(\\epsilon_1\\). function average_curve_optim takes nine arguments: data data.frame stress-strain data coupon_var name column representing coupon x_var name column representing independent variable y_var name column representing dependent variable fn function representing model par initial guess parameters model n_bins number bins sort data . default 100 need specified accept default. method method used optim(). Defaults “L-BFGS-B” ... extra parameters pass optim() ’ll call function: value third parameter, \\(\\epsilon_1\\) well outside range ’d expect. ’d expect “knee” somewhere range 0.025-0.100. can specify upper lower bounds parameters follows: can now plot curve fit laid original data.","code":"bilinear_fn <- function(strain, par) {   c1 <- par[1]   c2 <- par[2]   e1 <- par[3]   if (strain <= e1) {     return(c1 * strain)   } else {     return(c2 * (strain - e1) + c1 * e1)   } } curve_bilinear <- average_curve_optim(   pa12_tension,   Coupon, Strain, Stress,   bilinear_fn,   c(1, 1, 0.04) # the initial guess ) curve_bilinear #>  #> Range: ` Strain ` in  [ 0,  0.1409409 ] #>  #> Call: #> average_curve_optim(data = pa12_tension, coupon_var = Coupon,  #>     x_var = Strain, y_var = Stress, fn = bilinear_fn, par = c(1,  #>         1, 0.04)) #>  #> Parameters: #> [1] 265.6498522 316.1356934  -0.3258095 curve_bilinear <- average_curve_optim(   pa12_tension,   Coupon, Strain, Stress,   bilinear_fn,   c(1, 1, 0.04),   lower = c(0, 0, 0.025),   upper = c(2000, 2000, 0.100) ) curve_bilinear #>  #> Range: ` Strain ` in  [ 0,  0.1409409 ] #>  #> Call: #> average_curve_optim(data = pa12_tension, coupon_var = Coupon,  #>     x_var = Strain, y_var = Stress, fn = bilinear_fn, par = c(1,  #>         1, 0.04), lower = c(0, 0, 0.025), upper = c(2000, 2000,  #>         0.1)) #>  #> Parameters: #> [1] 873.46774319  79.60813130   0.05093549 curve_bilinear %>%   augment() %>%   ggplot(aes(x = Strain)) +   geom_point(aes(y = Stress, color = Coupon)) +   geom_line(aes(y = .fit))"},{"path":"https://cmstatrExt.cmstatr.net/articles/stress-strain.html","id":"preprocessing-data","dir":"Articles","previous_headings":"","what":"Preprocessing Data","title":"Stress-Strain Curves","text":"example data pa12_tension data set fairly well behaved need pre-processing. However, data actually deal require pre-processing. fff_shear data set comes cmstatrExt package typical data require pre-processing. Let’s start plotting data.  three aspects data ’ll deal : post-failure behavior high strains removed. part stress-strain curve important structural analysis make cure-fitting difficult. ’ll remove “toe” start curves. (“toe” small portion curves low strain relatively low slope). Depending test method, “toe” can caused behavior like test coupon seating test fixture, clearance taken . Depending cause “toe,” may desirable remove . case, removing desirable. curves, even “toe” removed, pass origin. due offset strain measurement correspond physical behavior material, ’ll apply appropriate offset. None adjustments done using functionality cmstatrExt, example included anyways types adjustments typically pre-requisite curve fitting using cmstatrExt. ’ll start removing offset data. , ’ll fit straight line data coupon stress range 1000 3000 psi, find x-intercept line subtract x-intercept strain value. bit complicated, ’ll steps combining everything. ’ll start filtering data stress values range 1000 3000, grouping Specimen finding x-intercept . code use nest(), mutate() map() pattern. Now ’ll use inner_join() join x_intercept column original data (matching appropriate Specimen). ’ll use head() just show first 6 rows brevity. Finally, ’ll subtract x-intercept strain coupon obtain corrected data (delete unneeded x_intercept column). ’ll plot now.  many approaches removing post-failure behavior. specific approach used depend data test method. cases, might choose simply manually delete rows data file. However, ’re processing data, may want truncate data using code. , ’ll approach removal post-failure behavior finding data local slope sufficiently negative. ’ll finding secant 5 points checking value negative certain threshold. First, let’s plot data color logical value indicating whether ’ll remove point. help find appropriate threshold using iteration negative slope cause point removed.  criteria seems cut data correct point, initial cutoff, subsequent data incorrectly retained. order avoid , ’ll add another criteria curve, soon single data point removed, subsequent data points also removed.  ’ll save result new variable, remove groupings, filter points intend remove drop unneeded temporary variables. Next, ’ll remove “toe” curve. “toe” extends stress somewhat less 1000 psi, ’ll remove “toe” simply removing data stress less 1000 psi. Now, let’s plot pre-processed data.  Now, let’s try fitting averaged curve data. ’ll plot curve fit overlaid data strain offset corrected (leaving “toe” post-failure behavior intact).","code":"fff_shear %>%   ggplot(aes(x = Strain, y = Stress, color = Specimen)) +   geom_point() fff_shear %>%   filter(Stress > 1000 & Stress < 3000) %>%   group_by(Specimen) %>%   nest() %>%   mutate(lm = map(data, ~lm(Strain ~ Stress, data = .))) %>%   mutate(x_intercept = map(lm, ~predict(.x, data.frame(Stress = 0)))) %>%   select(-c(lm, data)) %>%   unnest(x_intercept) #> # A tibble: 3 × 2 #> # Groups:   Specimen [3] #>   Specimen x_intercept #>   <chr>          <dbl> #> 1 A          -0.000163 #> 2 B          -0.000117 #> 3 C          -0.000432 fff_shear %>%   filter(Stress > 1000 & Stress < 3000) %>%   group_by(Specimen) %>%   nest() %>%   mutate(lm = map(data, ~lm(Strain ~ Stress, data = .))) %>%   mutate(x_intercept = map(lm, ~predict(.x, data.frame(Stress = 0)))) %>%   select(-c(lm, data)) %>%   unnest(x_intercept) %>%   inner_join(fff_shear, by = \"Specimen\") %>%   head(6) #> # A tibble: 6 × 4 #> # Groups:   Specimen [1] #>   Specimen x_intercept Stress   Strain #>   <chr>          <dbl>  <dbl>    <dbl> #> 1 A          -0.000163   230. 0        #> 2 A          -0.000163   241. 0.000273 #> 3 A          -0.000163   240. 0.000426 #> 4 A          -0.000163   245. 0.000536 #> 5 A          -0.000163   246. 0.000597 #> 6 A          -0.000163   264. 0.000834 fff_shear_offset <- fff_shear %>%   filter(Stress > 1000 & Stress < 3000) %>%   group_by(Specimen) %>%   nest() %>%   mutate(lm = map(data, ~lm(Strain ~ Stress, data = .))) %>%   mutate(x_intercept = map(lm, ~predict(.x, data.frame(Stress = 0)))) %>%   select(-c(lm, data)) %>%   unnest(x_intercept) %>%   inner_join(fff_shear, by = \"Specimen\") %>%   mutate(Strain = Strain - x_intercept) %>%   select(-c(x_intercept)) fff_shear_offset %>%   ggplot(aes(x = Strain, y = Stress, color = Specimen)) +   geom_point() fff_shear_offset %>%   group_by(Specimen) %>%   mutate(Lead_Stress = lead(Stress, 5),          Lead_Strain = lead(Strain, 5),          Slope = (Lead_Stress - Stress) / (Lead_Strain - Strain),          Remove = Slope < -1e5 | is.na(Slope)) %>%   ggplot(aes(x = Strain, y = Stress, shape = Specimen, color = Remove)) +   geom_point() fff_shear_offset %>%   group_by(Specimen) %>%   mutate(Lead_Stress = lead(Stress, 5),          Lead_Strain = lead(Strain, 5),          Slope = (Lead_Stress - Stress) / (Lead_Strain - Strain),          Remove = Slope < -1e5 | is.na(Slope),          Remove = cumsum(Remove) > 0) %>%   ggplot(aes(x = Strain, y = Stress, shape = Specimen, color = Remove)) +   geom_point() fff_shear_truncated <- fff_shear_offset %>%   group_by(Specimen) %>%   mutate(Lead_Stress = lead(Stress, 5),          Lead_Strain = lead(Strain, 5),          Slope = (Lead_Stress - Stress) / (Lead_Strain - Strain),          Remove = Slope < -1e5 | is.na(Slope),          Remove = cumsum(Remove) > 0) %>%   ungroup() %>%   filter(!Remove) %>%   select(Specimen, Stress, Strain) fff_shear_truncated_no_toe <- fff_shear_truncated %>%   filter(Stress > 1000) fff_shear_truncated_no_toe %>%   ggplot(aes(x = Strain, y = Stress, color = Specimen)) +   geom_point() +   xlim(c(0, NA)) +   ylim(c(0, NA)) curve_fff_shear <- fff_shear_truncated_no_toe %>%   average_curve_lm(     Specimen,     Stress ~ I(Strain) + I(Strain^2) + I(Strain^3) + 0   ) curve_fff_shear #>  #> Range: ` Strain ` in  [ 0,  0.112092 ] #>  #> Call: #> average_curve_lm(data = ., coupon_var = Specimen, model = Stress ~  #>     I(Strain) + I(Strain^2) + I(Strain^3) + 0) #>  #> Coefficients: #>   I(Strain)  I(Strain^2)  I(Strain^3)   #>      129670      -312398     -2060929 curve_fff_shear %>%   augment(fff_shear) %>%   ggplot(aes(x = Strain)) +   geom_point(aes(y = Stress, color = Specimen)) +   geom_line(aes(y = .fit))"},{"path":"https://cmstatrExt.cmstatr.net/articles/stress-strain.html","id":"plots-for-publication","dir":"Articles","previous_headings":"","what":"Plots for Publication","title":"Stress-Strain Curves","text":"last part vignette focus creating plots publication reports. ’ll focus following items examples. want customize plots particular publication. Changing theme Overlaying curves data multiple environmental conditions Adding secondary y-axis show US Customary SI units cmstatrExt package come data sets multiple environmental conditions. ’ll “fake ” illustration purposes scaling pa12_tension stress 50% strain 125% generate data “Fake ETA” environmental condition. ’ll create new data frame stacking original pa12_tension data frame version pa12_tension data frame stress scaled. stacking data frames, ’ll add new column condition. already cubic model original pa12_tension data, model missing Condition column, ’ll fit . ’ll “Fake ETA” data. Now, can plot two curves.  cases, ’d also want show raw data, can done follows. Note needed set group aestetic call geom_line().  Next, ’ll add secondary y-axis. Since primary y-axis units MPa, secondary y-axis units ksi. , ’ll use call scale_y_continuous()  ’s likely ’d want change theme plot using, example, theme_bw() custom theme.","code":"pa12_tension_conditions <-   bind_rows(     pa12_tension %>%       mutate(Condition = \"RTA\"),     pa12_tension %>%       mutate(Condition = \"Fake ETA\",              Stress = 0.50 * Stress,              Strain = 1.25 * Strain)   ) curve_cubic_rta <- pa12_tension_conditions %>%   filter(Condition == \"RTA\") %>%   average_curve_lm(     Coupon,     Stress ~ I(Strain) + I(Strain^2) + I(Strain^3) + 0   ) curve_cubic_rta #>  #> Range: ` Strain ` in  [ 0,  0.1409409 ] #>  #> Call: #> average_curve_lm(data = ., coupon_var = Coupon, model = Stress ~  #>     I(Strain) + I(Strain^2) + I(Strain^3) + 0) #>  #> Coefficients: #>   I(Strain)  I(Strain^2)  I(Strain^3)   #>        1173        -8762        20481 curve_cubic_fake_eta <- pa12_tension_conditions %>%   filter(Condition == \"Fake ETA\") %>%   average_curve_lm(     Coupon,     Stress ~ I(Strain) + I(Strain^2) + I(Strain^3) + 0   ) curve_cubic_fake_eta #>  #> Range: ` Strain ` in  [ 0,  0.1761762 ] #>  #> Call: #> average_curve_lm(data = ., coupon_var = Coupon, model = Stress ~  #>     I(Strain) + I(Strain^2) + I(Strain^3) + 0) #>  #> Coefficients: #>   I(Strain)  I(Strain^2)  I(Strain^3)   #>       469.3      -2803.8       5243.1 bind_rows(   augment(curve_cubic_rta),   augment(curve_cubic_fake_eta) ) %>%   ggplot(aes(x = Strain, y = .fit, color = Condition)) +   geom_line() bind_rows(   augment(curve_cubic_rta),   augment(curve_cubic_fake_eta) ) %>%   group_by(Condition) %>%   ggplot(aes(x = Strain)) +   geom_point(aes(y = Stress, color = Condition)) +   geom_line(aes(y = .fit, group = Condition)) bind_rows(   augment(curve_cubic_rta),   augment(curve_cubic_fake_eta) ) %>%   ggplot(aes(x = Strain, y = .fit, color = Condition)) +   geom_line() +   scale_y_continuous(     \"Stress [MPa]\",     sec.axis = sec_axis(~ . * 0.1450377377, name = \"Stress [ksi]\")   ) bind_rows(   augment(curve_cubic_rta),   augment(curve_cubic_fake_eta) ) %>%   ggplot(aes(x = Strain, y = .fit, color = Condition)) +   geom_line() +   scale_y_continuous(     \"Stress [MPa]\",     sec.axis = sec_axis(~ . * 0.1450377377, name = \"Stress [ksi]\")   ) +   theme_bw()"},{"path":"https://cmstatrExt.cmstatr.net/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Kloppenborg. Author, maintainer.","code":""},{"path":"https://cmstatrExt.cmstatr.net/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kloppenborg S (2024). cmstatrExt: Statistical Methods Composite Material Data. R package version 0.4.0,  https://cmstatrExt.cmstatr.net, https://github.com/cmstatr/cmstatrExt.","code":"@Manual{,   title = {cmstatrExt: More Statistical Methods for Composite Material Data},   author = {Stefan Kloppenborg},   year = {2024},   note = {R package version 0.4.0,  https://cmstatrExt.cmstatr.net},   url = {https://github.com/cmstatr/cmstatrExt}, }"},{"path":"https://cmstatrExt.cmstatr.net/index.html","id":"cmstatrext-","dir":"","previous_headings":"","what":"More Statistical Methods for Composite Material Data","title":"More Statistical Methods for Composite Material Data","text":"cmstatrExt provides statistical methods intended composite material data included CMH-17-1G.","code":""},{"path":"https://cmstatrExt.cmstatr.net/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"More Statistical Methods for Composite Material Data","text":"can install package CRAN follows:","code":"install.packages(\"cmstatrExt\")"},{"path":"https://cmstatrExt.cmstatr.net/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"More Statistical Methods for Composite Material Data","text":"examples ’ll use following packages: Currently, package provides several functions related equivalency tests. Factors two-sample dual-acceptance criteria can calculated follows: power test detecting reduction mean can computed follows:","code":"library(cmstatrExt) library(tidyverse) k <- k_equiv_two_sample(   alpha = 0.05,   n = 18,  # size of the qualification sample   m = 6    # size of the acceptance sample ) k #> [1] 2.9594727 0.9541395 power_sim_dual(   n_qual = 18,   m_equiv = 6,   replicates = 2500,   distribution = \"rnorm\",   param_qual = data.frame(mean = 0, sd = 1),   param_equiv = data.frame(mean = seq(-2, 0, length.out = 11), sd = 1),   k1 = k[1], k2 = k[2] ) %>%    mutate(delta = 0 - mean) %>%    ggplot(aes(x = delta, y = `Rejection Rate`)) +   geom_line()"},{"path":"https://cmstatrExt.cmstatr.net/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"More Statistical Methods for Composite Material Data","text":"suggestion question, please create issue GitHub. want contribute package, Pull Requests welcome!","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment a data.frame with the results from average_curve_lm — augment.average_curve_lm","title":"Augment a data.frame with the results from average_curve_lm — augment.average_curve_lm","text":"Augment data.frame results average_curve_lm","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment a data.frame with the results from average_curve_lm — augment.average_curve_lm","text":"","code":"# S3 method for average_curve_lm augment(x, newdata = NULL, extrapolate = FALSE, ...)"},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment a data.frame with the results from average_curve_lm — augment.average_curve_lm","text":"x average_curve_lm object newdata (optional) new data.frame augment object extrapolate whether show curve fit data data within original fitted range. Default: FALSE ... ignored","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment a data.frame with the results from average_curve_lm — augment.average_curve_lm","text":"data.frame new columns .fit, .extrapolate .residual","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment a data.frame with the results from average_curve_lm — augment.average_curve_lm","text":"","code":"curve_fit <- average_curve_lm(   pa12_tension,   Coupon,   Stress ~ I(Strain) + I(Strain^2) + I(Strain^3) + 0,   n_bins = 100 ) augment(curve_fit) #> # A tibble: 3,105 × 6 #>    Coupon     Strain Stress  .fit .extrapolate .residual #>    <chr>       <dbl>  <dbl> <dbl> <lgl>            <dbl> #>  1 Coupon 4 0        0.0561 0     FALSE           0.0561 #>  2 Coupon 4 0.000200 0.247  0.235 FALSE           0.0122 #>  3 Coupon 4 0.000400 0.569  0.468 FALSE           0.100  #>  4 Coupon 4 0.000601 0.440  0.702 FALSE          -0.262  #>  5 Coupon 4 0.000801 0.778  0.934 FALSE          -0.156  #>  6 Coupon 4 0.00100  0.854  1.17  FALSE          -0.312  #>  7 Coupon 4 0.00120  0.955  1.40  FALSE          -0.442  #>  8 Coupon 4 0.00140  1.40   1.63  FALSE          -0.230  #>  9 Coupon 4 0.00160  1.54   1.86  FALSE          -0.320  #> 10 Coupon 4 0.00180  1.62   2.09  FALSE          -0.463  #> # ℹ 3,095 more rows ## # A tibble: 3,105 × 6 ##    Coupon     Strain  Stress  .fit .extrapolate .residual ##    <chr>       <dbl>   <dbl> <dbl> <lgl>            <dbl> ##  1 Coupon 4 0        -0.353  0     FALSE          -0.353 ##  2 Coupon 4 0.000200 -0.0604 0.235 FALSE          -0.295 ##  3 Coupon 4 0.000400  0.283  0.469 FALSE          -0.185 ##  4 Coupon 4 0.000601  0.475  0.702 FALSE          -0.228 ##  5 Coupon 4 0.000801  0.737  0.935 FALSE          -0.198 ##  6 Coupon 4 0.00100   0.803  1.17  FALSE          -0.364 ##  7 Coupon 4 0.00120   1.25   1.40  FALSE          -0.151 ##  8 Coupon 4 0.00140   1.32   1.63  FALSE          -0.305 ##  9 Coupon 4 0.00160   1.53   1.86  FALSE          -0.325 ## 10 Coupon 4 0.00180   2.01   2.09  FALSE          -0.0735 ## # i 3,095 more row ## # i Use `print(n = ...)` to see more rows"},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment a data.frame with the results from average_curve_optim — augment.average_curve_optim","title":"Augment a data.frame with the results from average_curve_optim — augment.average_curve_optim","text":"Augment data.frame results average_curve_optim","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment a data.frame with the results from average_curve_optim — augment.average_curve_optim","text":"","code":"# S3 method for average_curve_optim augment(x, newdata = NULL, extrapolate = FALSE, ...)"},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment a data.frame with the results from average_curve_optim — augment.average_curve_optim","text":"x average_curve_optim object newdata (optional) new data.frame augment object extrapolate whether show curve fit data data within original fitted range. Default: FALSE ... ignored","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment a data.frame with the results from average_curve_optim — augment.average_curve_optim","text":"data.frame new columns .fit, .extrapolate .residual","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/augment.average_curve_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment a data.frame with the results from average_curve_optim — augment.average_curve_optim","text":"","code":"curve_fit <- average_curve_optim(   pa12_tension,   Coupon,   Strain,   Stress,   function(strain, par) {     sum(par * c(strain, strain^2, strain^3))   },   c(c1 = 1, c2 = 1, c3 = 1),   n_bins = 100 ) augment(curve_fit) #> # A tibble: 3,105 × 6 #>    Coupon     Strain Stress  .fit .extrapolate .residual #>    <chr>       <dbl>  <dbl> <dbl> <lgl>            <dbl> #>  1 Coupon 4 0        0.0561 0     FALSE           0.0561 #>  2 Coupon 4 0.000200 0.247  0.235 FALSE           0.0122 #>  3 Coupon 4 0.000400 0.569  0.468 FALSE           0.100  #>  4 Coupon 4 0.000601 0.440  0.702 FALSE          -0.262  #>  5 Coupon 4 0.000801 0.778  0.934 FALSE          -0.156  #>  6 Coupon 4 0.00100  0.854  1.17  FALSE          -0.312  #>  7 Coupon 4 0.00120  0.955  1.40  FALSE          -0.442  #>  8 Coupon 4 0.00140  1.40   1.63  FALSE          -0.230  #>  9 Coupon 4 0.00160  1.54   1.86  FALSE          -0.320  #> 10 Coupon 4 0.00180  1.62   2.09  FALSE          -0.463  #> # ℹ 3,095 more rows ## # A tibble: 3,105 × 6 ## Coupon     Strain  Stress  .fit .extrapolate .residual ##    <chr>       <dbl>   <dbl> <dbl> <lgl>            <dbl> ##  1 Coupon 4 0        -0.353  0     FALSE          -0.353 ##  2 Coupon 4 0.000200 -0.0604 0.235 FALSE          -0.295 ##  3 Coupon 4 0.000400  0.283  0.469 FALSE          -0.185 ##  4 Coupon 4 0.000601  0.475  0.702 FALSE          -0.228 ##  5 Coupon 4 0.000801  0.737  0.935 FALSE          -0.198 ##  6 Coupon 4 0.00100   0.803  1.17  FALSE          -0.364 ##  7 Coupon 4 0.00120   1.25   1.40  FALSE          -0.151 ##  8 Coupon 4 0.00140   1.32   1.63  FALSE          -0.305 ##  9 Coupon 4 0.00160   1.53   1.86  FALSE          -0.325 ## 10 Coupon 4 0.00180   2.01   2.09  FALSE          -0.0735 ## # i 3,095 more rows ## # i Use `print(n = ...)` to see more rows"},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an average curve using lm — average_curve_lm","title":"Generate an average curve using lm — average_curve_lm","text":"user must decide single dependent variable (Y) single independent variable (X). user specify formula relationship dependent independent variables. data.frame containing stress-strain (load-deflection) data one coupon, maximum value X coupon found smallest maximum value determines range curve fit performed: range zero value. positive values X considered. coupon individually, data divided user-specified number bins averaged within bin. resulting binned/averaged data passed stats::lm() perform curve fitting.","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an average curve using lm — average_curve_lm","text":"","code":"average_curve_lm(data, coupon_var, model, n_bins = 100)"},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an average curve using lm — average_curve_lm","text":"data data.frame coupon_var variable coupon identification model formula curve fit n_bins number bins average data inside fitting","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an average curve using lm — average_curve_lm","text":"object class average_curve_lm following content: data original data provided function binned_data data binning/averaging operation fit_lm results call lm n_bins number bins specified user max_x upper end range used fitting y_var independent (Y) variable x_var dependent (X) variable","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an average curve using lm — average_curve_lm","text":"specifying formula (argument model), two things keep mind. First, based physical behavior, normally desirable set intercept zero (e.g. 0 stress 0 strain). , include term +0 formula. Second, specifying term power X variable (example, $X^2$), needs wrapped inside \"-\" operator (), otherwise, R treat interaction term, rather exponent. words, want include quadratic term, need write (X^2) (replacing X appropriate variable data.frame).","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an average curve using lm — average_curve_lm","text":"","code":"# using the `pa12_tension` dataset and fitting a cubic polynomial with # zero intercept: curve_fit <- average_curve_lm(   pa12_tension,   Coupon,   Stress ~ I(Strain) + I(Strain^2) + I(Strain^3) + 0,   n_bins = 100 ) print(curve_fit) #>  #> Range: ` Strain ` in  [ 0,  0.1409409 ] #>  #> Call: #> average_curve_lm(data = pa12_tension, coupon_var = Coupon, model = Stress ~  #>     I(Strain) + I(Strain^2) + I(Strain^3) + 0, n_bins = 100) #>  #> Coefficients: #>   I(Strain)  I(Strain^2)  I(Strain^3)   #>        1173        -8762        20481   #>  ## Range: ` Strain ` in  [ 0,  0.1409409 ] ## ## Call: ##   average_curve_lm(data = pa12_tension, coupon_var = Coupon, ##                    model = Stress ~ I(Strain) + I(Strain^2) + I(Strain^3) ##                    + 0, n_bins = 100) ## ## Coefficients: ##    I(Strain)   I(Strain^2)   I(Strain^3) ##        1174         -8783         20586"},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an average curve using optim — average_curve_optim","title":"Generate an average curve using optim — average_curve_optim","text":"user must decide single dependent variable (Y) single independent variable (X). user specify function defining relationship dependent independent variables. data.frame containing stress-strain (load-deflection) data one coupon, maximum value X coupon found smallest maximum value determines range curve fit performed: range zero value. positive values X considered. coupon individually, data divided user-specified number bins averaged within bin. resulting binned/averaged data used curve fitting. mean squared error observed value Y result user-specified function evaluated X minimized varying parameters par.","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an average curve using optim — average_curve_optim","text":"","code":"average_curve_optim(   data,   coupon_var,   x_var,   y_var,   fn,   par,   n_bins = 100,   method = \"L-BFGS-B\",   ... )"},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an average curve using optim — average_curve_optim","text":"data data.frame coupon_var variable coupon identification x_var independent variable y_var dependent variable fn function defining relationship Y X. See Details information. par initial guess parameters n_bins number bins average data inside fitting method method used optim(). Defaults \"L-BFGS-B\" ... extra parameters passed optim()","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an average curve using optim — average_curve_optim","text":"object class average_curve_optim following content: data original data provided function binned_data data binning/averaging operation fn function supplied fit_optim results call optim call call n_bins number bins specified user max_x upper end range used fitting y_var independent (Y) variable x_var dependent (X) variable","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_optim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an average curve using optim — average_curve_optim","text":"function fn must two arguments. first argument must value independent variable (X): must numeric value (length one). second argument must vector parameters model, varied order obtain best fit. See example.","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/average_curve_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an average curve using optim — average_curve_optim","text":"","code":"# using the `pa12_tension` dataset and fitting a cubic polynomial with # zero intercept: curve_fit <- average_curve_optim(   pa12_tension,   Coupon,   Strain,   Stress,   function(strain, par) {     sum(par * c(strain, strain^2, strain^3))   },   c(c1 = 1, c2 = 1, c3 = 1),   n_bins = 100 ) ## Range: ` Strain ` in  [ 0,  0.1409409 ] ## ## Call: ## average_curve_optim(data = pa12_tension, coupon_var = Coupon, ##                     x_var = Strain, y_var = Stress, ##                     fn = function(strain, par) { ##                       sum(par * c(strain, strain^2, strain^3)) ##                     }, par = c(c1 = 1, c2 = 1, c3 = 1), n_bins = 100) ## ## Parameters: ##       c1        c2        c3 ## 1174.372 -8783.106 20585.898"},{"path":"https://cmstatrExt.cmstatr.net/reference/cmstatrExt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cmstatrExt: More Statistical Methods for Composite Material Data — cmstatrExt-package","title":"cmstatrExt: More Statistical Methods for Composite Material Data — cmstatrExt-package","text":"cmstatrExt package contains statistical methods can used composite material data, contained within CMH-17.","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/cmstatrExt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cmstatrExt: More Statistical Methods for Composite Material Data — cmstatrExt-package","text":"Maintainer: Stefan Kloppenborg stefan@kloppenborg.ca","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/fff_shear.html","id":null,"dir":"Reference","previous_headings":"","what":"Example shear stress-shear strain data — fff_shear","title":"Example shear stress-shear strain data — fff_shear","text":"Example shear stress-strain data. data collected using novel shear test method. Coupons made using thermoset via Fused Filament Fabrication (FFF). data requires clean-, including removal \"toe\", offsetting strain, removal post-failure data points. procedures demonstrated stress-strain vignette. See: vignette(\"stress-strain\", package = \"cmstatrExt\")","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/fff_shear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example shear stress-shear strain data — fff_shear","text":"","code":"fff_shear"},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/fff_shear.html","id":"fff-shear","dir":"Reference","previous_headings":"","what":"fff_shear","title":"Example shear stress-shear strain data — fff_shear","text":"data frame 2,316 rows 3 columns: Coupon coupon ID Stress shear stress measurement [psi] Strain shear strain measurement [/]","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/iso_equiv_two_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate t1 and t2 pairs that have the same p-Value — iso_equiv_two_sample","title":"Calculate t1 and t2 pairs that have the same p-Value — iso_equiv_two_sample","text":"Calculates pairs t1 t2 values, p-value two-sample equivalency test. See p_equiv_two_sample().","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/iso_equiv_two_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate t1 and t2 pairs that have the same p-Value — iso_equiv_two_sample","text":"","code":"iso_equiv_two_sample(n, m, alpha, t1max, t2max, n_points)"},{"path":"https://cmstatrExt.cmstatr.net/reference/iso_equiv_two_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate t1 and t2 pairs that have the same p-Value — iso_equiv_two_sample","text":"n size qualification sample m size equivalency sample alpha desired p-value t1max maximum value t1 (approximate) t2max maximum value t2 (approximate) n_points number returned points twice n_points","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/iso_equiv_two_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate t1 and t2 pairs that have the same p-Value — iso_equiv_two_sample","text":"data.frame values t1 t2","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/iso_equiv_two_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate t1 and t2 pairs that have the same p-Value — iso_equiv_two_sample","text":"values t1 t2 based transformation: t1 = (X_mean - Y_min) / S t2 = (X_mean - Y_mean) / S : X_mean mean qualification sample S standard deviation qualification sample Y_min minimum acceptance sample Y_mean mean acceptance sample","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/iso_equiv_two_sample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate t1 and t2 pairs that have the same p-Value — iso_equiv_two_sample","text":"Kloppenborg, S. (2023). Lot acceptance testing using sample mean extremum finite qualification samples. Journal Quality Technology, https://doi.org/10.1080/00224065.2022.2147884","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/iso_equiv_two_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate t1 and t2 pairs that have the same p-Value — iso_equiv_two_sample","text":"","code":"# \\donttest{ if(requireNamespace(\"tidyverse\")){   library(cmstatrExt)   library(tidyverse)   curve <- iso_equiv_two_sample(24, 8, 0.05, 4, 1.5, 10)   curve    curve %>%     ggplot(aes(x = t1, y = t2)) +       geom_path() +       ggtitle(\"Acceptance criteria for alpha=0.05\") } #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors  # }"},{"path":"https://cmstatrExt.cmstatr.net/reference/k_equiv_two_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the factors for a two-sample acceptance test — k_equiv_two_sample","title":"Calculate the factors for a two-sample acceptance test — k_equiv_two_sample","text":"Calculates factors k1 k2, used setting acceptance values lot acceptance. factors consider size qualification sample (n) size acceptance sample (m). test detailed forthcoming paper.","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/k_equiv_two_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the factors for a two-sample acceptance test — k_equiv_two_sample","text":"","code":"k_equiv_two_sample(alpha, n, m)"},{"path":"https://cmstatrExt.cmstatr.net/reference/k_equiv_two_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the factors for a two-sample acceptance test — k_equiv_two_sample","text":"alpha desired probability Type 1 error n size qualification sample m size acceptance sample","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/k_equiv_two_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the factors for a two-sample acceptance test — k_equiv_two_sample","text":"vector length 2 contents c(k1, k2)","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/k_equiv_two_sample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the factors for a two-sample acceptance test — k_equiv_two_sample","text":"Kloppenborg, S. (2023). Lot acceptance testing using sample mean extremum finite qualification samples. Journal Quality Technology, https://doi.org/10.1080/00224065.2022.2147884","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/p_equiv.html","id":null,"dir":"Reference","previous_headings":"","what":"p-Value for one-sample equivalency — p_equiv","title":"p-Value for one-sample equivalency — p_equiv","text":"Calculates p-Value one-sample acceptance test based Vangel (2002). test considers sample size acceptance sample (m). Two test statistics required: t1 = (mu - Y_min) / sigma t2 = (mu - Y_mean) / sigma : mu mean population sigma standard deviation population Y_min minimum acceptance sample Y_mean mean acceptance sample","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/p_equiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"p-Value for one-sample equivalency — p_equiv","text":"","code":"p_equiv(m, t1, t2)"},{"path":"https://cmstatrExt.cmstatr.net/reference/p_equiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"p-Value for one-sample equivalency — p_equiv","text":"m size acceptance sample t1 test statistic described . May vector. t2 test statistic described . May vector.","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/p_equiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"p-Value for one-sample equivalency — p_equiv","text":"vector p-Values length t1 t2","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/p_equiv_two_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"p-Value for two-sample equivalency — p_equiv_two_sample","title":"p-Value for two-sample equivalency — p_equiv_two_sample","text":"Calculates p-Value two-sample acceptance test. test considers sample size qualification sample (n) acceptance sample (m). Two test statistics required: t1 = (X_mean - Y_min) / S t2 = (X_mean - Y_mean) / S : X_mean mean qualification sample S standard deviation qualification sample Y_min minimum acceptance sample Y_mean mean acceptance sample","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/p_equiv_two_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"p-Value for two-sample equivalency — p_equiv_two_sample","text":"","code":"p_equiv_two_sample(n, m, t1, t2)"},{"path":"https://cmstatrExt.cmstatr.net/reference/p_equiv_two_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"p-Value for two-sample equivalency — p_equiv_two_sample","text":"n size qualification sample m size acceptance sample t1 test statistic described . May vector. t2 test statistic described . May vector.","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/p_equiv_two_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"p-Value for two-sample equivalency — p_equiv_two_sample","text":"vector p-Values length t1 t2","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/pa12_tension.html","id":null,"dir":"Reference","previous_headings":"","what":"Example stress-strain data — pa12_tension","title":"Example stress-strain data — pa12_tension","text":"Example tension stress-strain data. data generated tracing stress-strain graph PA12 manuscript referenced . non-linearity seen low strain original data set removed, data re-sampling produce tightly spaced strain values. Normally-distributed error added stress. code used generate data set can found https://github.com/cmstatr/cmstatrExt/blob/master/data-raw/pa12-tension.R","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/pa12_tension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example stress-strain data — pa12_tension","text":"","code":"pa12_tension"},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/pa12_tension.html","id":"pa-tension","dir":"Reference","previous_headings":"","what":"pa12_tension","title":"Example stress-strain data — pa12_tension","text":"data frame 3,212 rows 3 columns: Coupon coupon ID Strain strain measurement [mm/mm] Stress stress measurement [MPa]","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/pa12_tension.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example stress-strain data — pa12_tension","text":"Alomarah, Amer & Ruan, Dong & Masood, S. & Gao, Zhanyuan. (2019). Compressive properties novel additively manufactured 3D auxetic structure. Smart Materials Structures. 28. 10.1088/1361-665X/ab0dd6.","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/power_sim_dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Rejection rate for dual acceptance criteria based via simulation — power_sim_dual","title":"Rejection rate for dual acceptance criteria based via simulation — power_sim_dual","text":"Performs Monte Carlo simulation determine rejection rate dual acceptance criteria (based sample minimum mean). specifying several sets parameters \"equivalency\" distribution, power curve acceptance test can determined.","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/power_sim_dual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rejection rate for dual acceptance criteria based via simulation — power_sim_dual","text":"","code":"power_sim_dual(   n_qual,   m_equiv,   replicates,   distribution = \"rnorm\",   param_qual,   param_equiv,   k1,   k2 )"},{"path":"https://cmstatrExt.cmstatr.net/reference/power_sim_dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rejection rate for dual acceptance criteria based via simulation — power_sim_dual","text":"n_qual sample size qualification sample m_equiv sample size equivalency/acceptance sample replicates number simulated qualification samples equivalency samples. single value given, numbers used , vector length two given, first element number qualification replicates second element number equivalency replicates. distribution function name generating random sample (defaults \"rnorm\") param_qual data.frame (must single row) columns matching arguments distribution function param_equiv data.frame columns matching arguments distribution function. simulation repeated parameters specified row data.frame. k1 factor determining acceptance criterion sample minimum, calculated mean_qual - k1 * sd_qual k2 factor determining acceptance criterion sample average, calculated mean_qual - k2 * sd_qual","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/power_sim_dual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rejection rate for dual acceptance criteria based via simulation — power_sim_dual","text":"data.frame. first column(s) duplicate data.frame passed argument param_equiv. last column named Rejection Rate value equal number samples rejected simulation run.","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/power_sim_dual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rejection rate for dual acceptance criteria based via simulation — power_sim_dual","text":"function performs simulation estimate performance dual acceptance criteria commonly used composite materials aerospace applications. criteria based setting lower limits minimum individual (lower extremum) mean \"acceptance\" sample. limits computed based sample mean sample standard deviation initial \"qualification\" sample. criteria intended test non-inferiority determine material lots \"acceptance\" samples drawn accepted production. Another common use criteria determine process change, equipment change, second manufacturing site acceptable production. set distribution parameters given rows param_equiv, number samples size m_equiv generated using function distribution. Next, number qualification samples size n_qual generated using distribution function parameters given param_qual. Limits minimum average determined qualification sample. equivalency sample compared limits determined qualification sample. number replicate simulation given replicates: vector length two, first element number qualification samples second number equivalency samples; replicates single value, number used number qualification samples acceptance samples. Therefore, row param_equiv total replicates[1] * replicates[2] criteria evaluated. argument distribution must correspond function generates (pseudo) random numbers. function must argument n specifies sample size generated. argument distribution matches certain common distribution functions (rnorm), C++ implementation random number generation function used instead calling R code, results significant speedup.","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/power_sim_dual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rejection rate for dual acceptance criteria based via simulation — power_sim_dual","text":"","code":"# Compute a power curve for a dual acceptance criteria for a qualification # sample size of 18 and an equivalency sample size of 6, using 2000 # replicates. A standard normal distribution is used and the power to # detect a decrease in mean is determined. set.seed(12345) # make it reproducible power_sim_dual(   18, 6,   2000,   \"rnorm\",   data.frame(mean = 0, sd = 1),   data.frame(mean = c(-2, -1.5, -1, 0.5, 0), sd = 1),   2.959, 0.954 ) #>   mean sd Rejection Rate #> 1 -2.0  1     0.98349975 #> 2 -1.5  1     0.88186900 #> 3 -1.0  1     0.56382425 #> 4  0.5  1     0.00864025 #> 5  0.0  1     0.04826250 ##   mean sd Rejection Rate ## 1 -2.0  1     0.98349975 ## 2 -1.5  1     0.88186900 ## 3 -1.0  1     0.56382425 ## 4  0.5  1     0.00864025 ## 5  0.0  1     0.04826250"},{"path":"https://cmstatrExt.cmstatr.net/reference/print.average_curve_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an average_curve_lm object — print.average_curve_lm","title":"Print an average_curve_lm object — print.average_curve_lm","text":"Print average_curve_lm object","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/print.average_curve_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an average_curve_lm object — print.average_curve_lm","text":"","code":"# S3 method for average_curve_lm print(x, ...)"},{"path":"https://cmstatrExt.cmstatr.net/reference/print.average_curve_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an average_curve_lm object — print.average_curve_lm","text":"x average_curve_lm object ... additional arguments passed print.lm","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/print.average_curve_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an average_curve_lm object — print.average_curve_lm","text":"object passed method invisibly returned (via invisible(x)).","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/print.average_curve_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an average_curve_optim object — print.average_curve_optim","title":"Print an average_curve_optim object — print.average_curve_optim","text":"Print average_curve_optim object","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/print.average_curve_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an average_curve_optim object — print.average_curve_optim","text":"","code":"# S3 method for average_curve_optim print(x, ...)"},{"path":"https://cmstatrExt.cmstatr.net/reference/print.average_curve_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an average_curve_optim object — print.average_curve_optim","text":"x average_curve_optim object ... used","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/print.average_curve_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an average_curve_optim object — print.average_curve_optim","text":"object passed method invisibly returned (via invisible(x)).","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/reference/summary.average_curve_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize an average_curve_lm object — summary.average_curve_lm","title":"Summarize an average_curve_lm object — summary.average_curve_lm","text":"Summarize average_curve_lm object","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/summary.average_curve_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize an average_curve_lm object — summary.average_curve_lm","text":"","code":"# S3 method for average_curve_lm summary(object, ...)"},{"path":"https://cmstatrExt.cmstatr.net/reference/summary.average_curve_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize an average_curve_lm object — summary.average_curve_lm","text":"object average_curve_lm object ... arguments passed summary.lm","code":""},{"path":"https://cmstatrExt.cmstatr.net/reference/summary.average_curve_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize an average_curve_lm object — summary.average_curve_lm","text":"return value. method produces printed output.","code":""},{"path":[]},{"path":"https://cmstatrExt.cmstatr.net/news/index.html","id":"version-040","dir":"Changelog","previous_headings":"","what":"Version 0.4.0","title":"Version 0.4.0","text":"CRAN release: 2024-05-07 First release CRAN Minor documentation improvements","code":""},{"path":"https://cmstatrExt.cmstatr.net/news/index.html","id":"version-030","dir":"Changelog","previous_headings":"","what":"Version 0.3.0","title":"Version 0.3.0","text":"Added functions creating average stress-strain curves (average_curve_lm average_curve_optim) Added example stress-strain data (pa12_tension fff_shear) Added vignette examples fitting average curves stress-strain data","code":""},{"path":"https://cmstatrExt.cmstatr.net/news/index.html","id":"version-021","dir":"Changelog","previous_headings":"","what":"Version 0.2.1","title":"Version 0.2.1","text":"Update p-value vignette","code":""},{"path":"https://cmstatrExt.cmstatr.net/news/index.html","id":"version-020","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"Version 0.2.0","text":"Created p-value calculator website Added iso_equiv_two_sample function Created p-value vignette Added unit integration tests","code":""},{"path":"https://cmstatrExt.cmstatr.net/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"Version 0.1.0","title":"Version 0.1.0","text":"Documentation improvements Added equivalency/acceptance factor calculator website","code":""},{"path":"https://cmstatrExt.cmstatr.net/news/index.html","id":"version-010-1","dir":"Changelog","previous_headings":"","what":"Version 0.1.0","title":"Version 0.1.0","text":"Added power simulation function Added documentation website Changed c++ unit test framework testthat (uses catch2) Improved speed numerical integration","code":""},{"path":"https://cmstatrExt.cmstatr.net/news/index.html","id":"version-001","dir":"Changelog","previous_headings":"","what":"Version 0.0.1","title":"Version 0.0.1","text":"First public release","code":""}]
